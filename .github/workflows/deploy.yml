name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # 1) Build & Push Backend (multi-arch)
      - name: Build & Push Backend
        uses: docker/build-push-action@v6
        with:
          context: ./spring_9jwt
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/spring_9jwt-final:latest
          platforms: linux/amd64,linux/arm64

      # 2) Build & Push Frontend (multi-arch) + API 주소 전달
      - name: Build & Push Frontend
        uses: docker/build-push-action@v6
        with:
          context: ./routerAndJwt
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/react-auth-final:latest
          platforms: linux/amd64,linux/arm64
          build-args: |
            VITE_REQ_API_HOST=${{ secrets.VITE_REQ_API_HOST }}
          # ↑ 예: https://YOUR_EC2_PUBLIC_IP:8080 혹은 http://<도메인>:8080
          #    Dockerfile/Vite 설정에서 ARG/ENV로 받아야 함 (VITE_*)

      # 3) (선택) EC2에 환경파일 업로드가 필요하면 여기에 scp 추가
      # - name: Upload .env to EC2
      #   uses: appleboy/scp-action@v0.1.7
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ubuntu
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     source: ".github/env/prod-backend.env"
      #     target: "~/spring-app/.env"

      # 4) Deploy via SSH
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/spring_9jwt-final:latest
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/react-auth-final:latest

            # 기존 컨테이너 정지/삭제
            docker rm -f spring_9jwt-final || true
            docker rm -f react-auth-final || true

            # 백엔드 실행
            docker run -d --name spring_9jwt-final \
              --restart unless-stopped \
              -p 8080:8080 \
              --env-file ~/spring-app/.env \
              ${{ secrets.DOCKER_HUB_USERNAME }}/spring_9jwt-final:latest

            # 프런트 실행 (정적 Nginx)
            docker run -d --name react-auth-final \
              --restart unless-stopped \
              -p 80:80 \
              ${{ secrets.DOCKER_HUB_USERNAME }}/react-auth-final:latest

            # (선택) 디스크 정리
            docker image prune -f || true
